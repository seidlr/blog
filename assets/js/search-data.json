{
  
    
        "post0": {
            "title": "A data-driven analysis of ATP Tour Final in Cincinatti in 1990 - Brad Gilbert vs. Stefan Edberg",
            "content": "Introduction . Recently my brother finally read Brad Gilbert’s Winning Ugly (1993). I tried to convince him for quite some time that he should read it but he ignored my advice for a long time. He proposed that I should create some event data for one of Brad Gilbert’s matches. With all tennis tournaments being suspended at the time I thought that this might be fun. So, I went to TennisTV and typed “Brad Gilbert” into the search box and got exactly one result: The ATP Final in Cincinatti where Brad Gilbert faced Stefan Edberg. As creating event data basically means to note the location of each bounce and hit on the court, I was quite pleased that the match was a fast 6:1 6:1 victory of Stefan Edberg, even though Brad Gilbert won’t agree with me on this. :) The biggest challenge for the data collection was that I had to write a tool that allows me to collect the hit and bounce information independent of the camera image because a significant part of the match was not shown in this nice static topview that is used today. I spare you with the details of the collection, and let’s focus on why it is pretty cool to have event data for this match. . Event Data . To start with, here is a simple visualization what event data is. We record different events in the match and for each we note the position of the event and the position of each player at the time of the event. In the example, Edberg is serving from the right, we record the positions of Gilbert, Edberg and the ball at the time of the serve (S), each time the ball bounces (B) or a player hits (H) the ball and when the rally is finished (P). This allows us to investigate a match on a rally or even single-event level that is clearly way out of scope for common box statistics. . Stats . As this match happened 30 years ago we only have box score statistics of it. If you are interested, here is a more in-depth discussion of the match. But, box scores do not tell the whole story of a match and I believe that you can get so much more insights based on player and ball movement compared to these simple summary statistics. Therefore, I wanted to provide at least some insights based on statistics that are not available with simple box scores. . Rally breakdown . Let’s start with something simple that should be part of every analysis. A breakdown of all winners and errors over the rally length. Craig O’Shannessy is a big advocate for this kind of analysis, and I agree that this makes total sense. You need to put statistics into context and a breakdown by rally length let you easily spot where you lost or won the points. Therefore, lets look at the winners and errors of Edberg and Gilbert and split them into rallies of lengths 0-4, 5-8 and 9+. . Player Type 0-4 5-8 9+ . B.Gilbert | Winner | 6 | 4 | 0 | . B.Gilbert | Error | 28 | 2 | 4 | . S.Edberg | Winner | 15 | 3 | 0 | . S.Edberg | Error | 16 | 1 | 0 | . What we can see is that Edberg managed to keep the rallies short, especially through his serve&amp;volley game. He hit a lot winners with his first strokes and also forced Brad Gilbert to play tough shots which resulted in a lot of errors early in the rallies. Nowadays, Craig O’Shannessy is advocating that players should come to the net more often and that one should focus more on playing the points in 0-4 smart. Therefore, Edbergs game plan in this final might be a blueprint of what O’Shanessy wants the game to look like. Lets look at the stroke distribution of both players. . Stroke Breakdowm . The distribution of strokes for both players is a statistic that is also available with box scores. It clearly shows that Edberg varied his strokes more than Gilbert and managed to play lots of volleys. Building on this we can look at the first stat that is not available without event data. The covered distances of both players. . Covered distances . When you have the hit locations of all strokes of a player and the player positions, it is simple to calculate the distance he covered during a rally and the match. Here are the results for the match. You might have guessed that Gilbert runs more than Edberg, but actually Edberg managed to not let Gilbert run and covered more distance through moving to the net than Gilbert running all over the court chasing Edbergs volleys. . . Serve locations and next stroke . We have seen that Edberg played a lot of serve&amp;volley, thus it is interesting to look into his serve locations and follow up strokes. Here is a breakdown of all serve locations and positions of Edbergs next stroke. (Only including points where Edberg actually had to hit the second ball.) Ball bounces are colored yellow and the hit positions of Edbergs first stroke after the serve are colored red and green indicating if Edberg won this point or not. The hit positions show that Edberg played serve and volley almost every time and did this very successfully. . . Movement Radars . When you have the positions of each player at each bounce and hit event, it feels quite natural to ask if one could use this information to get more insight into the actual movement of the players. Labeling each event in the match I recognized that S. Edberg was moving a lot forward to the net, especially given his exclusive serve&amp;volley strategy. On the other hand, B. Gilbert was not moving a lot, as shown before, and his movement was more left and right around the baseline, especially when S. Edberg was serving. Let’s investigate the movement of both players for B. Gilberts service games. Instead of showing a heatmap I want to try something else and create movement radars to quantify the movement directions for each player. The intuition is that we should be able to see if someone was coming to the net often or just running left to right. If someone was forced to only play backhands this should also be visible. For each hit event I note down the covered distance and the relative angle between the current and the last position of the player. Then I split the movements into eight equidistant intervals and create a simple histogram of the angles. Sounds complicated? Lets look at the results. . Here are the movements of Gilbert and Edberg when Gilbert was serving. We can see that Gilbert was moving forward and coming to the net often and that Edberg forced him to play backhand ground strokes and volleys. Edberg, on the other hand, was moving left and right and hitting forhand and backhands but also moved forward to the net when he had a change to do so. I think that this “simple” chart can tell you a good story about the match. Lets look at the movements when Edberg was serving. . We can clearly see that Edberg was moving forward and playing serve&amp;volley a lot. Furthermore, he played mostly backhand volleys and acted cross-court. Also, Edberg played to Gilberts backhand a lot and made him move to ad-court and sometimes even backwards. Additionally, lets focus on the annotations in each part of the pie. These are distances covered for each of the eight angles. You can clearly see how Edberg covered a lot more distance coming to the net than Gilbert running right to left on the baseline. . Summary . Overall I hope that I could show the value of event data in tennis and there is so much more you can do with this kind of data. I think you can nicely see how Edberg, on top of his game in 1990, forced Gilbert to play where he was incredibly good at - focusing on short rallies and finishing at the net. In the final 1990 Edberg was playing his strengths to his opponents weaknesses, in principal following the future advice in Winning Ugly (released in 1993) to the point. .",
            "url": "https://seidlr.github.io/blog/tennis%20analytics/atp%20tour/event%20data/cincinatti/brad%20gilbert/stefan%20edberg/2020/06/10/atp-cincinatti-1990-gilbert-edberg.html",
            "relUrl": "/tennis%20analytics/atp%20tour/event%20data/cincinatti/brad%20gilbert/stefan%20edberg/2020/06/10/atp-cincinatti-1990-gilbert-edberg.html",
            "date": " • Jun 10, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "One click to Pitch Control - Running Spearmans Pitch Control model in Google Colab.",
            "content": "The content the guys from Friends Of Tracking Data (#FoT) are putting out there is growing and recently Laurie Shaws shared his implementation of William Spearman’spitch control model from 2018. Also recently Devin Pleuler shared his Analytics Handbook which consists of a bunch of jupyter notebooks that you can run directly in Google Colab. This means you do not need to install anything, using the code is just one click away. I think that every repository should be build in this way as you won’t have any overhead if you just want to play around. I thought it would be really cool to also be able to just run Spearman’s Pitch Control model in this way. Therefore, I’ve restructured Lauries repository to allow for direct Google Colab integration. . Notebook Colab . Basic Plotting of Event and Tracking Data | | . Advanced Plotting and Summary Statistics | | . Pitch Control | | . You can get the code on Github: https://github.com/seidlr/LaurieOnTracking . Just click on the badge next to Pitch Control and you are good to go. Then: . Run each cell in the notebook and ignore the warning about the unknown environment. | The data is downloaded directly from Metricas repository. | Give it some time when it says “Reading team home” in a cell. | . . If you are interested in the details what I needed to change to be able to run the code in Google Colab, you can find all code in my fork of Lauries repository on Github. Here are the new benefits. . A clean structure, where notebooks and modules are separated. | The Metrica sample data is directly read from their github repository. | You can run the notebooks directly in Google Colab. | It is pip-installable. Just run pip install git+https://github.com/seidlr/LaurieOnTracking.git . And you are able to use the implementation anywhere in your projects. I.e. you can read in the metrica data of sample match 2 in a dataframe with this code snippet. . import friendsoftracking.metrica.IO as mio game_id = 2 # let&#39;s look at sample match 2 # read in the event data events = mio.read_event_data(game_id) events.head() . | .",
            "url": "https://seidlr.github.io/blog/friends%20of%20tracking%20data/fotd/google%20colab/tracking%20data/metrica%20sports/2020/04/25/pitch-control.html",
            "relUrl": "/friends%20of%20tracking%20data/fotd/google%20colab/tracking%20data/metrica%20sports/2020/04/25/pitch-control.html",
            "date": " • Apr 25, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Interactive Visualisation of Football Tracking Data",
            "content": "Unfortunately, I missed the last episode How Tracking Data is Used in Football and What are the Future Challenges of Friends of Tracking Data hosted by David Sumptor (@Soccermatics) with @JaviOnData, @the_spearman, Suds Gopaladesikan and @EightyFivePoint. It felt a bit like missing a great panel at a conference due to overlap in schedules. Luckily for me, and all others, everything is recorded on Youtube and available here. This is what David had to say about the episode. . For me personally, Thursday&#39;s live #FoT was one of the best discussions I have ever had about the science behind football analytics. So in depth with @JaviOnData, @the_spearman, @suds_g and @EightyFivePoint. Here @sk3tchYourLife really picks out the key points of the discussion. pic.twitter.com/feQ0e5y6m7 . &mdash; David Sumpter (@Soccermatics) April 10, 2020 I agree one hundred percent that it was a really in-dept discussion of current issues. They also managed to get sample tracking data of two matches from Metrica Sports. Given the quality of the talk they had, I thought I will have to up the ante on my side. I thought about what I would have been very happy to know a year ago and therefore I created a notebook where I use Jupyter widgets to create interactive components which you can use to investigate the Metrica Sports data. You can get all the code on Github, https://github.com/seidlr/fotd-interactive-football-pitch, and simply follow the installation instructions in the Readme. Or, and this is what I really like about Jupyter widgets, you can just use Binder to test everything online without installation. Just click on this image . and give Docker some time to build the image, and run all code of the repository online. I decided to work on three small showcases such that you get an idea how you can use the tools. . Use-case 1: Moving Players on a Football Pitch | Use-case 2: Animate Tracking Data | Use-case 3: Replay Events with Tracking Data | Here are some videos of the three use-cases I picked as showcases: . Use-case 1: Moving Players on a Football Pitch . I think everyone will share kind of the same story of how his or her visualisation of football pitches changed or improved over time. For me it was starting with Matplotlib and switching to Plotly because you actually don’t want to spent a ton of time to get some simple hover effects etc. But at some point you recognize that in the end you want to be able to actually move players or the ball around on the pitch and possibly rerun your pitch control or expected-goals model and answer some What-If questions. If you reached this point, you will be pleased to see that this is actually possible using bqplot, a Python wrapper around D3.js, in a jupyter notebook. If you launch the notebook on Binder, you can drag and drop each player and the ball on the pitch. . Use-case 2: Animate Tracking Data . The cool thing is that you can build other widgets on top of this in a simple way. As example, I’ve attached a Play and Slider widget. Now you can easily replay the match using tracking data. . Use-case 3: Replay Events with Tracking Data . The Metrica data also gives you access to all the events that happened in the match. Would be cool to be able to filter events and jump to the position in the replay where they happened? We can use a qgrid widget to do this! Here is the result. . What to do from here? . Getting all the widgets into a state to run smoothly is always a bit challenging, especially because they tend to fail silently, meaning that there might be no error in the notebook but the widget is not doing what you want it to do due to a coding error. The only way to learn how to use them is actually to invest time. The best way is to build on a widget and try to add new functionality. Here are some ideas: . Add the current game time to the pitch plot (and update it when playing). | Add some functionality like voronoi cells or convex hulls of teams as implemented here. | Add an auto-replay option: When selecting an event, the animation starts at the start time of the event and stops it reached the end time. | Create an overlay/tooltip for player information using bqplot.tooltip. | Calculate the distance covered for each player and the ball in the match. | .",
            "url": "https://seidlr.github.io/blog/friends%20of%20tracking%20data/fotd/widgets/bqplot/qgrid/tracking%20data/metrica%20sports/2020/04/11/interactive-football-pitch.html",
            "relUrl": "/friends%20of%20tracking%20data/fotd/widgets/bqplot/qgrid/tracking%20data/metrica%20sports/2020/04/11/interactive-football-pitch.html",
            "date": " • Apr 11, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Visualising Football Tracking Data with Bokeh Server",
            "content": "Last Thursday I listened to the first episode of Friends of Tracking where David Sumpter (@Soccermatics), @JaviOnData, @AlexThomasTheFA, Suds Gopaladesikan, @PeraltaFran23 and @pascal_bauer had the great idea to “give back during difficult times”. They will provide open lectures on football analytics explaining how they work inside clubs and national teams on their Youtube channel. As the name of their group suggests the group was initiated when tracking data became available in football and they recognized that everyone was working on the same problems and code. Because David Sumpter also mentioned that he tries to get some free tracking data of the Swedish league I thought that it might be a good idea to share a repository I found that can be used to easily visualize tracking data in a Jupyter notebook and start from there instead of implementing the visualization. It is written in Python and uses bokeh for the interaction. The nice thing is that it already has features to show Voronoi cells and convex hulls of both teams. . You can find the code at https://github.com/seidlr/Game-Animation and follow the instructions in the Readme. Here is a short summary if you already have Anaconda installed: . Clone the repository git clone https://github.com/seidlr/Game-Animation . | Change the directory cd Game-Animation . | Create the conda environment conda env update . This creates a conda environment called game-animation. . | Activate the environment conda activate game-animation . | And finally start the jupyter notebook server jupyer notebook . | Select the Soccer_example.ipynb and run the code cells. | Following the instructions in the notebook you can easily visualise and animate tracking data. It might look like this: . Using the code you can actually focus your time on more valueable projects than building the visualisation. Here are some ideas to get started. . Possible extensions . Color the Voronoi cells by team in red and blue. | Use sklearn K-means on the x values to find three clusters for attack, midfield and defense. | Draw lines between the players in each of the clusters as shown here: | Count all “line-breaking” passes | . Note . I have just forked this repository from https://github.com/samirak93/Game-Animation. The code was not written by me. I only made some small changes to make it easier to use: . I’ve cleaned up unneccesary folders like __pycache__ and .ipynb_checkpoints. | I’ve added a .gitignore file to keep the repository clean. | I’ve added an environment.yml file such that you can install all necessary requirements to run the notebooks. | I’ve changed the calculation of the convex hull of teams to not include the goalkeeper. | . .",
            "url": "https://seidlr.github.io/blog/friends%20of%20tracking%20data/fotd/bokeh/tracking%20data/2020/03/28/bokeh-football.html",
            "relUrl": "/friends%20of%20tracking%20data/fotd/bokeh/tracking%20data/2020/03/28/bokeh-football.html",
            "date": " • Mar 28, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I consider myself one of the lucky few who is able to make a living working on problems and data he really cares about. . Something about me. . Football Data Scientist, Deltatre AG / Sportec Solutions data provider for German Bundesliga | models for clubs and media based on tracking and event data | getting advanced stats into television | . | Machine Learning Engineer Football Analytics w/ Jan Van Haaren at SciSports models on event data | . | PhD in Computer Science (numerical methods, inverse problems) | M.Sc. Computational Science and Engineering, Thesis: Deep learning w/ Autoencoder | Diploma in Mathematics, focus on nonlinear optimization | . Misc: . Part of German first Hackathon team | Mentor at Hackathon v2 | Helped GIG with data analytics at AusOpen 2020 | . fastpages . This site is built with fastpages, An easy to use blogging platform with extra features for Jupyter Notebooks. .",
          "url": "https://seidlr.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}